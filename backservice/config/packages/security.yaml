security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    
    providers:
        # Configuration de votre fournisseur d'utilisateurs
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        main:
            # Le firewall "main" gère les routes de l'application
            stateless: true  # Indique que l'authentification ne se base pas sur des sessions
            provider: app_user_provider
            json_login:
                provider: app_user_provider
                check_path: /api/login
                username_path: email
                password_path: password
            
            jwt: ~ # Active l'authentification par token JWT pour les routes protégées
    
    access_control:
        # L'ordre est important ! La première règle correspondante est appliquée.

        # 1. Autorise l'accès à la route de connexion sans authentification.
        # Cela permet au json_login de faire son travail.
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        
        # 2. Autorise l'accès à la route d'inscription sans authentification.
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        
        # 3. Protège toutes les autres routes de l'API.
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10